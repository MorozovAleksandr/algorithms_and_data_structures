-- ПРИНЦИП РАБОТЫ --
Алгоритм считает, сколько нужно минимальных изменений, чтобы одну строку превратить в другую.
Изменения бывают трёх видов:
- удалить символ
- вставить символ
- заменить один символ на другой

Алгоритм использует матрицу (две строки), где записывается, сколько шагов нужно, чтобы часть одной строки стала частью другой.
Он идёт по символам обеих строк и на каждом шаге выбирает самый дешёвый вариант из трёх возможных действий.
После обработки всех символов в последней ячейке матрицы получается ответ - расстояние Левенштейна.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Алгоритм проверяет все возможные пути преобразования одной строки в другую и на каждом шаге выбирает минимальное количество действий.
Так как каждое новое значение зависит только от предыдущих уже посчитанных, результат гарантированно будет минимальным количеством изменений.
Использование только двух строк таблицы не влияет на правильность - старые данные больше не нужны после перехода к следующей строке.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
- n - длина первой строки
- m - длина второй строки
Сложность n * m  (каждый шаг - сравнение символов и выбор минимального значения).
Итоговая временная сложность: O(n * m)

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
- n - длина первой строки
- m - длина второй строки
Пространственная сложность равняется размеру меньшей строки
Итоговая пространственная сложность: O(min(n, m))