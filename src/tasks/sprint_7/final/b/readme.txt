-- ПРИНЦИП РАБОТЫ --
Алгоритм проверяет, можно ли разделить набор очков, заработанных в выигранных партиях, на две части с одинаковой суммой.
Он сначала суммирует все очки. Если сумма нечётная, разбиение невозможно.
Далее используется динамическое программирование: создаётся массив dp, где dp[i] означает, что сумму i можно собрать из некоторых очков.
Для каждого очка алгоритм проверяет, какие новые суммы можно получить, добавляя это очко к уже возможным суммам.
После обработки всех очков проверяется, можно ли собрать сумму, равную половине общей суммы - если да, разбиение возможно.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Алгоритм проверяет все комбинации сумм, которые можно составить из набора очков.
На каждом шаге учитываются только новые суммы, образованные добавлением текущего очка к уже существующим.
Так как все предыдущие возможные суммы учтены, dp[target] гарантированно отражает возможность собрать половину суммы.
Использование одномерного массива dp с проходом с конца к началу сохраняет корректность - каждое новое значение не перезаписывает нужные старые данные.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
- n - количество выигранных партий
- s - сумма всех очков
- target - половина суммы всех очков
В худшем случае нужно пройтись по каждому очку и для каждой суммы до target проверить возможность обновления массива dp.
Итоговая временная сложность: O(n * s)

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
- s - сумма всех очков
- target - половина суммы всех очков
Используется один массив dp длиной target + 1.
Итоговая пространственная сложность: O(s)