-- ПРИНЦИП РАБОТЫ --
Дек реализован на основе кольцевого буфера (массива фиксированного размера).
Есть несколько ключевых элементов дека:
head - указатель на первый элемент
tail - указатель на следующий элемент после последнего добавленного
size - текущий размер дека
При работе с методами дека мы добавляем/удаляем элементы, изменяем указатель(tail/head) и размер дека(size)

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Для всех операций (push_front, push_back, pop_front, pop_back)
изменяются head/tail по принципу кольцевого буфера, обрабатываеются граничные случаи, как пустой/полный дек.
Кольцевая арифметика (% maxSize) гарантирует, что указатели всегда в пределах [0, maxSize - 1].
При push_front в пустой дек head сдвигается на maxSize - 1, а tail остаётся на 0, что гарантирует корректность последующих операций.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Инициализация дека занимает O(1), так как массив заполняется "лениво" (элементы добавляются только при операциях push)
Методы очереди:
    push_back - O(1)
    push_front - O(1)
    pop_back - O(1)
    pop_front - O(1)
    isEmpty - O(1)
    isFull - O(1)

Работа с очередью:
    executeDequeOperations - O(n)

Итоговая временная сложность программы: - O(n)

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Пространственная сложность — O(n), где n — размер буфера.
Методы очереди:
    push_back - O(1)
    push_front - O(1)
    pop_back - O(1)
    pop_front - O(1)
    isEmpty - O(1)
    isFull - O(1)

Работа с очередью:
    executeDequeOperations - O(n)

Итоговая пространственная сложность - O(n)
